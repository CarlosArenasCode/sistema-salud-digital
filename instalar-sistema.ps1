# Script de instalaciÃ³n automÃ¡tica para Sistema de Salud Digital
# Ejecutar como administrador en PowerShell

Write-Host "=== INSTALADOR SISTEMA DE SALUD DIGITAL ===" -ForegroundColor Green
Write-Host "Verificando requisitos del sistema..." -ForegroundColor Yellow

# Variables de configuraciÃ³n
$proyectoPath = Get-Location
$javaMinVersion = "17"
$postgresUser = "postgres"
$postgresPassword = "1234"
$postgresDB = "sistema_salud"

# FunciÃ³n para verificar si un comando existe
function Test-Command($command) {
    try {
        Get-Command $command -ErrorAction Stop
        return $true
    }
    catch {
        return $false
    }
}

# FunciÃ³n para obtener versiÃ³n de Java
function Get-JavaVersion {
    try {
        $javaOutput = java -version 2>&1
        $versionLine = $javaOutput[0] -replace '"', ''
        $version = ($versionLine -split ' ')[2]
        $majorVersion = ($version -split '\.')[0]
        return [int]$majorVersion
    }
    catch {
        return 0
    }
}

# 1. Verificar Java
Write-Host "`n1. Verificando Java..." -ForegroundColor Cyan
if (Test-Command "java") {
    $javaVersion = Get-JavaVersion
    if ($javaVersion -ge $javaMinVersion) {
        Write-Host "âœ“ Java $javaVersion encontrado (requerido: $javaMinVersion+)" -ForegroundColor Green
    } else {
        Write-Host "âœ— Java $javaVersion es demasiado antiguo (requerido: $javaMinVersion+)" -ForegroundColor Red
        Write-Host "Por favor instalar Java 17+ desde: https://adoptium.net/temurin/releases/" -ForegroundColor Yellow
        return
    }
} else {
    Write-Host "âœ— Java no encontrado" -ForegroundColor Red
    Write-Host "Por favor instalar Java 17+ desde: https://adoptium.net/temurin/releases/" -ForegroundColor Yellow
    return
}

# 2. Verificar Maven
Write-Host "`n2. Verificando Maven..." -ForegroundColor Cyan
if (Test-Command "mvn") {
    $mavenOutput = mvn -version 2>&1
    $mavenVersion = ($mavenOutput[0] -split ' ')[2]
    Write-Host "âœ“ Maven $mavenVersion encontrado" -ForegroundColor Green
} else {
    Write-Host "âœ— Maven no encontrado" -ForegroundColor Red
    Write-Host "Por favor instalar Maven desde: https://maven.apache.org/download.cgi" -ForegroundColor Yellow
    return
}

# 3. Verificar PostgreSQL
Write-Host "`n3. Verificando PostgreSQL..." -ForegroundColor Cyan
if (Test-Command "psql") {
    try {
        $env:PGPASSWORD = $postgresPassword
        $pgOutput = psql -U $postgresUser -h localhost -p 5432 -c "SELECT version();" 2>&1
        if ($LASTEXITCODE -eq 0) {
            Write-Host "âœ“ PostgreSQL conectado exitosamente" -ForegroundColor Green
        } else {
            Write-Host "âœ— No se puede conectar a PostgreSQL" -ForegroundColor Red
            Write-Host "Verificar que PostgreSQL estÃ© ejecutÃ¡ndose y las credenciales sean correctas" -ForegroundColor Yellow
            Write-Host "Usuario: $postgresUser, ContraseÃ±a: $postgresPassword" -ForegroundColor Yellow
        }
    }
    catch {
        Write-Host "âœ— Error conectando a PostgreSQL: $_" -ForegroundColor Red
    }
} else {
    Write-Host "âœ— PostgreSQL (psql) no encontrado" -ForegroundColor Red
    Write-Host "Por favor instalar PostgreSQL desde: https://www.postgresql.org/download/" -ForegroundColor Yellow
    return
}

# 4. Verificar puertos
Write-Host "`n4. Verificando puertos disponibles..." -ForegroundColor Cyan

# Puerto 8080 (aplicaciÃ³n)
$puerto8080 = Get-NetTCPConnection -LocalPort 8080 -ErrorAction SilentlyContinue
if ($puerto8080) {
    Write-Host "âš  Puerto 8080 estÃ¡ en uso (PID: $($puerto8080.OwningProcess))" -ForegroundColor Yellow
    Write-Host "El script de inicio liberarÃ¡ este puerto automÃ¡ticamente" -ForegroundColor Yellow
} else {
    Write-Host "âœ“ Puerto 8080 disponible" -ForegroundColor Green
}

# Puerto 5432 (PostgreSQL)
$puerto5432 = Get-NetTCPConnection -LocalPort 5432 -ErrorAction SilentlyContinue
if ($puerto5432) {
    Write-Host "âœ“ Puerto 5432 en uso por PostgreSQL (esperado)" -ForegroundColor Green
} else {
    Write-Host "âš  Puerto 5432 no estÃ¡ en uso - PostgreSQL podrÃ­a no estar ejecutÃ¡ndose" -ForegroundColor Yellow
}

# 5. Inicializar base de datos
Write-Host "`n5. Inicializando base de datos..." -ForegroundColor Cyan
try {
    if (Test-Path ".\inicializar-db.ps1") {
        & ".\inicializar-db.ps1"
        Write-Host "âœ“ Base de datos inicializada" -ForegroundColor Green
    } else {
        Write-Host "âš  Script de inicializaciÃ³n de BD no encontrado" -ForegroundColor Yellow
        Write-Host "Creando base de datos manualmente..." -ForegroundColor Yellow
        
        $env:PGPASSWORD = $postgresPassword
        $checkDB = psql -U $postgresUser -h localhost -p 5432 -lqt | Select-String $postgresDB
        if (-not $checkDB) {
            psql -U $postgresUser -h localhost -p 5432 -c "CREATE DATABASE $postgresDB;"
            Write-Host "âœ“ Base de datos '$postgresDB' creada" -ForegroundColor Green
        } else {
            Write-Host "âœ“ Base de datos '$postgresDB' ya existe" -ForegroundColor Green
        }
    }
}
catch {
    Write-Host "âœ— Error inicializando base de datos: $_" -ForegroundColor Red
}

# 6. Compilar proyecto
Write-Host "`n6. Compilando proyecto..." -ForegroundColor Cyan
Set-Location -Path ".\backend"
try {
    Write-Host "Descargando dependencias y compilando..." -ForegroundColor Yellow
    mvn clean compile -q
    if ($LASTEXITCODE -eq 0) {
        Write-Host "âœ“ Proyecto compilado exitosamente" -ForegroundColor Green
    } else {
        Write-Host "âœ— Error compilando el proyecto" -ForegroundColor Red
        Set-Location -Path $proyectoPath
        return
    }
}
catch {
    Write-Host "âœ— Error durante la compilaciÃ³n: $_" -ForegroundColor Red
    Set-Location -Path $proyectoPath
    return
}
Set-Location -Path $proyectoPath

# 7. Crear configuraciÃ³n personalizada
Write-Host "`n7. Configurando sistema..." -ForegroundColor Cyan
$configPath = ".\backend\src\main\resources\application-local.yml"
$localConfig = @"
# ConfiguraciÃ³n local personalizada
spring:
  datasource:
    password: $postgresPassword
  profiles:
    active: postgresql

# ConfiguraciÃ³n especÃ­fica para esta instalaciÃ³n
server:
  port: 8080

logging:
  level:
    com.clinica.salud: INFO
"@

try {
    $localConfig | Out-File -FilePath $configPath -Encoding UTF8
    Write-Host "âœ“ ConfiguraciÃ³n local creada en: $configPath" -ForegroundColor Green
}
catch {
    Write-Host "âš  No se pudo crear configuraciÃ³n local: $_" -ForegroundColor Yellow
}

# 8. VerificaciÃ³n final
Write-Host "`n=== RESUMEN DE INSTALACIÃ“N ===" -ForegroundColor Green
Write-Host "âœ“ Java: Instalado y configurado" -ForegroundColor Green
Write-Host "âœ“ Maven: Instalado y configurado" -ForegroundColor Green
Write-Host "âœ“ PostgreSQL: Conectado y base de datos lista" -ForegroundColor Green
Write-Host "âœ“ Proyecto: Compilado y listo" -ForegroundColor Green
Write-Host "âœ“ ConfiguraciÃ³n: Personalizada para este sistema" -ForegroundColor Green

Write-Host "`n=== PRÃ“XIMOS PASOS ===" -ForegroundColor Cyan
Write-Host "1. Ejecutar: .\iniciar-sistema.ps1" -ForegroundColor White
Write-Host "2. Abrir navegador en: http://localhost:8080/login.html" -ForegroundColor White
Write-Host "3. Para detener: .\detener-sistema.ps1" -ForegroundColor White

Write-Host "`nÂ¡Sistema listo para usar! ðŸŽ‰" -ForegroundColor Green

# Preguntar si quiere iniciar ahora
$respuesta = Read-Host "`nÂ¿Desea iniciar el sistema ahora? (s/n)"
if ($respuesta -eq "s" -or $respuesta -eq "S" -or $respuesta -eq "si" -or $respuesta -eq "Si") {
    Write-Host "`nIniciando sistema..." -ForegroundColor Yellow
    if (Test-Path ".\iniciar-sistema.ps1") {
        & ".\iniciar-sistema.ps1"
    } else {
        Write-Host "Script de inicio no encontrado. Iniciando manualmente..." -ForegroundColor Yellow
        Set-Location -Path ".\backend"
        Start-Process pwsh -ArgumentList "-NoExit", "-Command", "mvn spring-boot:run"
        Set-Location -Path $proyectoPath
        Start-Sleep -Seconds 5
        Start-Process "http://localhost:8080/login.html"
    }
}

Write-Host "`nÂ¡InstalaciÃ³n completada! âœ¨" -ForegroundColor Green
